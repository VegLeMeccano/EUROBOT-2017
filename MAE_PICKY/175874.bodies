class RECENTRAGE_State
!!!224642.cpp!!!	time_out(inout stm : MAE_PICKY) : void
  {
    stm._set_currentState(stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state);
#ifdef VERBOSE_STATE_MACHINE
    puts("DEBUG : current state is now .MAE_PICKY.JEU.MISSION_PUSH_DISTRIBUTEUR_MONOCHROME.CATCH AND THROW");
#endif
    if (!master->get_plateau_jeu()->get_distributeur_monochrome()->is_empty()) {
      stm._set_currentState(stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state._prise_ar_face_state);
#ifdef VERBOSE_STATE_MACHINE
      puts("DEBUG : current state is now .MAE_PICKY.JEU.MISSION_PUSH_DISTRIBUTEUR_MONOCHROME.CATCH AND THROW.PRISE AR FACE");
#endif
      stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state._prise_ar_face_state.create(stm);
    }
    else if (master->get_plateau_jeu()->get_distributeur_monochrome()->is_empty()) {
      stm._set_currentState(stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state._replis_state);
#ifdef VERBOSE_STATE_MACHINE
      puts("DEBUG : current state is now .MAE_PICKY.JEU.MISSION_PUSH_DISTRIBUTEUR_MONOCHROME.CATCH AND THROW.REPLIS");
#endif
      stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state._replis_state.create(stm);
    }
  }
!!!224770.cpp!!!	create(inout stm : MAE_PICKY) : void
	_doentry(stm);
!!!224898.cpp!!!	_doentry(inout stm : MAE_PICKY) : void
#ifdef VERBOSE_STATE_MACHINE
	puts("DEBUG : execute entry behavior of .MAE_PICKY.JEU.MISSION_PUSH_DISTRIBUTEUR_MONOCHROME.CATCH AND THROW.RECENTRAGE");
#endif
// position front, slide centre, pitch folded
serialPrintf(master->getPortSerie(),"F0 \n");
serialPrintf(master->getPortSerie(),"L1 \n");
serialPrintf(master->getPortSerie(),"Y2 \n");
serialPrintf(master->getPortSerie(),"P0 \n");

serialPrintf(master->getPortSerie(),"C5 \n");

master->set_time_out(500);
!!!225026.cpp!!!	_upper(inout stm : MAE_PICKY) : MAE_PICKY::AnyState
  return &stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state;
