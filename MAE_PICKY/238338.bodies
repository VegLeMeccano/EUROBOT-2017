class REPLIS_State
!!!375426.cpp!!!	_completion(inout stm : MAE_PICKY) : bool
  {
    stm._set_currentState(stm._mae_picky_state._jeu_state._mission_transfert_direct_distributeur_polychrome_state._catch_and_place_state);
#ifdef VERBOSE_STATE_MACHINE
    puts("DEBUG : current state is now .MAE_PICKY.JEU.MISSION_TRANSFERT_DIRECT_DISTRIBUTEUR_POLYCHROME.CATCH AND PLACE");
#endif
    stm._mae_picky_state._jeu_state._mission_transfert_direct_distributeur_polychrome_state._catch_and_place_state._exit15(stm);
    return (bool) 1;
  }
!!!375554.cpp!!!	create(inout stm : MAE_PICKY) : void
	_doentry(stm);
	_completion(stm);
!!!375682.cpp!!!	_upper(inout stm : MAE_PICKY) : MAE_PICKY::AnyState
  return &stm._mae_picky_state._jeu_state._mission_transfert_direct_distributeur_polychrome_state._catch_and_place_state;
!!!389634.cpp!!!	_doentry(inout stm : MAE_PICKY) : void
#ifdef VERBOSE_STATE_MACHINE
	puts("DEBUG : execute entry behavior of .MAE_PICKY.JEU.MISSION_TRANSFERT_DIRECT_DISTRIBUTEUR_POLYCHROME.CATCH AND PLACE.REPLIS");
#endif
// position front, slide centre, pitch folded
serialPrintf(master->getPortSerie(),"F0 \n");

if(master->is_blue()){
	serialPrintf(master->getPortSerie(),"L0 \n");
	serialPrintf(master->getPortSerie(),"Y1 \n");
}
if(master->is_yellow()){
	serialPrintf(master->getPortSerie(),"L2 \n");
	serialPrintf(master->getPortSerie(),"Y3 \n");
}

serialPrintf(master->getPortSerie(),"P0 \n");


serialPrintf(master->getPortSerie(),"C5 \n");
serialPrintf(master->getPortSerie(),"C8 \n");
