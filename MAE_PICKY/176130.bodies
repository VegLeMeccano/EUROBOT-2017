class ROTATION_AND_SLIDE_VERS_ZONE_DE_POSE_State
!!!225666.cpp!!!	time_out(inout stm : MAE_PICKY) : void
  {
    stm._set_currentState(stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state._pose_sur_zone_depart_state);
#ifdef VERBOSE_STATE_MACHINE
    puts("DEBUG : current state is now .MAE_PICKY.JEU.MISSION_PUSH_DISTRIBUTEUR_MONOCHROME.CATCH AND THROW.POSE SUR ZONE DEPART");
#endif
    stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state._pose_sur_zone_depart_state.create(stm);
  }
!!!225794.cpp!!!	create(inout stm : MAE_PICKY) : void
	_doentry(stm);
!!!225922.cpp!!!	_doentry(inout stm : MAE_PICKY) : void
#ifdef VERBOSE_STATE_MACHINE
	puts("DEBUG : execute entry behavior of .MAE_PICKY.JEU.MISSION_PUSH_DISTRIBUTEUR_MONOCHROME.CATCH AND THROW.ROTATION AND SLIDE VERS ZONE DE POSE");
#endif
// position front, slide centre, pitch folded
serialPrintf(master->getPortSerie(),"F0 \n");
if(master->is_blue()){
	// slide left, diagonal left
	serialPrintf(master->getPortSerie(),"L0 \n");
	serialPrintf(master->getPortSerie(),"Y1 \n");
}
if(master->is_yellow()){
	// slide left, diagonal left
	serialPrintf(master->getPortSerie(),"L2 \n");
	serialPrintf(master->getPortSerie(),"Y3 \n");
}
serialPrintf(master->getPortSerie(),"P0 \n");

master->set_time_out(500);
!!!226050.cpp!!!	_upper(inout stm : MAE_PICKY) : MAE_PICKY::AnyState
  return &stm._mae_picky_state._jeu_state._mission_push_distributeur_monochrome_state._catch_and_throw_state;
